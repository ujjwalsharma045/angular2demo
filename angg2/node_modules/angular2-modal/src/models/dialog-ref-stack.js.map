{"version":3,"sources":["../../../../src/angular2-modal/src/models/dialog-ref-stack.ts"],"names":[],"mappings":"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","file":"dialog-ref-stack.js","sourceRoot":"","sourcesContent":["import { DialogRef } from './dialog-ref';\n\nconst /** @type {?} */ BASKET_GROUP = {};\n/**\n * A dumb stack implementation over an array.\n */\nexport class DialogRefStack<T> {\nprivate _stack: DialogRef<T>[];\nprivate _stackMap: Map<DialogRef<T>, any>;\n/**\n * @return {?}\n */\nget length(): number {\n    return this._stack.length;\n  }\nconstructor() {\n    this._stack = [];\n    this._stackMap = new Map<DialogRef<T>, any>();\n  }\n/**\n * @param {?} dialogRef\n * @param {?=} group\n * @return {?}\n */\npush(dialogRef: DialogRef<T>, group?: any): void {\n    if (this._stack.indexOf(dialogRef) === -1) {\n      this._stack.push(dialogRef);\n      this._stackMap.set(dialogRef, group || BASKET_GROUP);\n    }\n  }\n/**\n * Push a DialogRef into the stack and manage it so when it's done\n * it will automatically kick itself out of the stack.\n * @param {?} dialogRef\n * @param {?=} group\n * @return {?}\n */\npushManaged(dialogRef: DialogRef<T>, group?: any): void {\n    this.push(dialogRef, group);\n    dialogRef.onDestroy.subscribe(() => this.remove(dialogRef));\n  }\n/**\n * @return {?}\n */\npop(): DialogRef<T> {\n    const /** @type {?} */ dialogRef = this._stack.pop();\n    this._stackMap.delete(dialogRef);\n    return dialogRef;\n  }\n/**\n * Remove a DialogRef from the stack.\n * @param {?} dialogRef\n * @return {?}\n */\nremove(dialogRef: DialogRef<T>): void {\n    let /** @type {?} */ idx = this.indexOf(dialogRef);\n    if (idx > -1) {\n      this._stack.splice(idx, 1);\n      this._stackMap.delete(dialogRef);\n    }\n  }\n/**\n * @param {?} index\n * @return {?}\n */\nindex(index: number): DialogRef<T> {\n    return this._stack[index];\n  }\n/**\n * @param {?} dialogRef\n * @return {?}\n */\nindexOf(dialogRef: DialogRef<T>): number {\n     return this._stack.indexOf(dialogRef);\n  }\n/**\n * @param {?} dialogRef\n * @return {?}\n */\ngroupOf(dialogRef: DialogRef<T>): any {\n    return this._stackMap.get(dialogRef);\n  }\n/**\n * @param {?} group\n * @return {?}\n */\ngroupBy(group: any): DialogRef<T>[] {\n    let /** @type {?} */ arr = [];\n    if (group) {\n      this._stackMap.forEach( (value, key) => {\n        if (value === group) {\n          arr.push(key);\n        }\n      });\n    }\n    return arr;\n  }\n/**\n * @param {?} group\n * @return {?}\n */\ngroupLength(group: any): number {\n    let /** @type {?} */ count = 0;\n    if (group) {\n      this._stackMap.forEach( (value, key) => {\n        if (value === group) {\n          count++;\n        }\n      });\n    }\n    return count;\n  }\n}\n\nfunction DialogRefStack_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogRefStack.prototype._stack;\n/** @type {?} */\nDialogRefStack.prototype._stackMap;\n}\n\n"]}