{"version":3,"sources":["../../../../src/angular2-modal/src/overlay/overlay.service.ts"],"names":[],"mappings":"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","file":"overlay.service.js","sourceRoot":"","sourcesContent":["import { ViewContainerRef, Injectable, Injector } from '@angular/core';\n\nimport { OverlayRenderer, OverlayConfig } from '../models/tokens';\nimport { DialogRefStack } from '../models/dialog-ref-stack';\nimport { vcRefStore } from '../models/vc-ref-store';\nimport { DialogRef } from '../models/dialog-ref';\nimport { OverlayContext } from '../models/overlay-context';\n\nconst /** @type {?} */ _stack = new DialogRefStack<any>();\nexport class Overlay {\n/**\n * @return {?}\n */\nget stackLength(): number {\n    return _stack.length;\n  }\n/**\n * @param {?} _modalRenderer\n * @param {?} injector\n */\nconstructor(private _modalRenderer: OverlayRenderer, protected injector: Injector) {\n  }\n/**\n * Check if a given DialogRef is the top most ref in the stack.\n * TODO: distinguish between body modal vs in element modal.\n * @param {?} dialogRef\n * @return {?}\n */\nisTopMost(dialogRef: DialogRef<any>): boolean {\n    return _stack.indexOf(dialogRef) === _stack.length - 1;\n  }\n/**\n * @param {?} dialogRef\n * @return {?}\n */\nstackPosition(dialogRef: DialogRef<any>) {\n    return _stack.indexOf(dialogRef);\n  }\n/**\n * @param {?} dialogRef\n * @return {?}\n */\ngroupStackLength(dialogRef: DialogRef<any>): number {\n    return _stack.groupLength(_stack.groupOf(dialogRef));\n  }\n/**\n * Creates an overlay and returns a dialog ref.\n * @template T\n * @param {?} config instructions how to create the overlay\n * @param {?=} group A token to associate the new overlay with, used for reference (stacks usually)\n * @return {?}\n */\nopen<T extends OverlayContext>(config: OverlayConfig, group?: any): DialogRef<T>[] {\n    let /** @type {?} */ viewContainer = config.viewContainer, /** @type {?} */\n        containers: Array<ViewContainerRef> = [];\n\n    if (typeof viewContainer === 'string') {\n      containers = vcRefStore.getVCRef( /** @type {?} */((viewContainer as string)));\n    } else if (Array.isArray(viewContainer)) {\n      containers = /** @type {?} */(( viewContainer as any));\n    } else if (viewContainer) {\n      containers = /** @type {?} */(( [viewContainer] as any));\n    } else {\n      containers = [null];\n    }\n\n    return containers\n      .map( vc => this.createOverlay(config.renderer || this._modalRenderer, vc, config, group));\n  }\n/**\n * @param {?} renderer\n * @param {?} vcRef\n * @param {?} config\n * @param {?} group\n * @return {?}\n */\nprivate createOverlay(renderer: OverlayRenderer,\n                        vcRef: ViewContainerRef,\n                        config: OverlayConfig,\n                        group: any): DialogRef<any> {\n\n    if (config.context) {\n      config.context.normalize();\n    }\n\n    if (!config.injector) {\n      config.injector = this.injector;\n    }\n\n    let /** @type {?} */ dialog = new DialogRef<any>(this, config.context || {});\n    dialog.inElement = config.context && !!config.context.inElement;\n\n    let /** @type {?} */ cmpRef = renderer.render(dialog, vcRef, config.injector);\n\n    Object.defineProperty(dialog, 'overlayRef', {value: cmpRef});\n    _stack.pushManaged(dialog, group);\n\n    return dialog;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OverlayRenderer, },\n{type: Injector, },\n];\n}\n\nfunction Overlay_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlay.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlay.ctorParameters;\n/** @type {?} */\nOverlay.prototype._modalRenderer;\n/** @type {?} */\nOverlay.prototype.injector;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}